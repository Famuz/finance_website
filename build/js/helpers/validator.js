const{check:check}=require("express-validator"),usersRepo=require("../../repositories/users");module.exports={requireTitle:check("title").trim().isLength({min:5,max:40}).withMessage("Must be between 5 and 40 characters"),requirePrice:check("price").trim().toFloat().isFloat({min:1}).withMessage("Must be a number greater than 1"),requireEmail:check("email").trim().normalizeEmail().isEmail().withMessage("Must be a valid email").custom(async e=>{if(await usersRepo.getOneBy({email:e}))throw new Error("Email in use")}),requirePassword:check("password").trim().isLength({min:4,max:20}).withMessage("Must be between 4 and 20 characters"),requirePasswordConfirmation:check("passwordConfirmation").trim().isLength({min:4,max:20}).withMessage("Must be between 4 and 20 characters").custom((e,{req:r})=>{if(e!==r.body.password)throw new Error("Passwords must match");return!0}),requireEmailExists:check("email").trim().normalizeEmail().isEmail().withMessage("Must provide a valid email").custom(async e=>{if(!await usersRepo.getOneBy({email:e}))throw new Error("Email not found!")}),requireValidPasswordForUser:check("password").trim().custom(async(e,{req:r})=>{const s=await usersRepo.getOneBy({email:r.body.email});if(!s)throw new Error("Invalid password");if(!await usersRepo.comparedPasswords(s.password,e))throw new Error("Invalid password")})};
//# sourceMappingURL=validator.js.map
