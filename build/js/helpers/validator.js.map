{"version":3,"sources":["helpers/validator.js"],"names":["check","require","usersRepo","module","exports","requireTitle","trim","isLength","min","max","withMessage","requirePrice","toFloat","isFloat","requireEmail","normalizeEmail","isEmail","custom","async","getOneBy","email","Error","requirePassword","requirePasswordConfirmation","passwordConfirmation","req","body","password","requireEmailExists","requireValidPasswordForUser","user","comparedPasswords"],"mappings":"AAAA,MAAMA,MAAEA,OAAUC,QAAQ,qBACpBC,UAAYD,QAAQ,4BAE1BE,OAAOC,QAAU,CACfC,aAAcL,MAAM,SACjBM,OACAC,SAAS,CAAEC,IAAK,EAAGC,IAAK,KACxBC,YAAY,uCACfC,aAAcX,MAAM,SACjBM,OACAM,UACAC,QAAQ,CAAEL,IAAK,IACfE,YAAY,mCACfI,aAAcd,MAAM,SACjBM,OACAS,iBACAC,UACAN,YAAY,yBACZO,OAAOC,MAAAA,IAEN,SAD2BhB,UAAUiB,SAAS,CAAEC,MAAAA,IAE9C,MAAM,IAAIC,MAAM,kBAGtBC,gBAAiBtB,MAAM,YACpBM,OACAC,SAAS,CAAEC,IAAK,EAAGC,IAAK,KACxBC,YAAY,uCACfa,4BAA6BvB,MAAM,wBAChCM,OACAC,SAAS,CAAEC,IAAK,EAAGC,IAAK,KACxBC,YAAY,uCACZO,OAAO,CAACO,GAAwBC,IAAAA,MAC/B,GAAID,IAAyBC,EAAIC,KAAKC,SACpC,MAAM,IAAIN,MAAM,wBAElB,OAAO,IAEXO,mBAAoB5B,MAAM,SACvBM,OACAS,iBACAC,UACAN,YAAY,8BACZO,OAAOC,MAAAA,IAEN,UADmBhB,UAAUiB,SAAS,CAAEC,MAAAA,IAEtC,MAAM,IAAIC,MAAM,sBAGtBQ,4BAA6B7B,MAAM,YAChCM,OACAW,OAAOC,MAAOS,GAAYF,IAAAA,MACzB,MAAMK,QAAa5B,UAAUiB,SAAS,CAAEC,MAAOK,EAAIC,KAAKN,QACxD,IAAKU,EACH,MAAM,IAAIT,MAAM,oBAOlB,UAJ4BnB,UAAU6B,kBACpCD,EAAKH,SACLA,GAGA,MAAM,IAAIN,MAAM","file":"validator.js","sourcesContent":["const { check } = require('express-validator');\nconst usersRepo = require('../../repositories/users');\n\nmodule.exports = {\n  requireTitle: check('title')\n    .trim()\n    .isLength({ min: 5, max: 40 })\n    .withMessage('Must be between 5 and 40 characters'),\n  requirePrice: check('price')\n    .trim()\n    .toFloat()\n    .isFloat({ min: 1 })\n    .withMessage('Must be a number greater than 1'),\n  requireEmail: check('email')\n    .trim()\n    .normalizeEmail()\n    .isEmail()\n    .withMessage('Must be a valid email')\n    .custom(async email => {\n      const existingUser = await usersRepo.getOneBy({ email });\n      if (existingUser) {\n        throw new Error('Email in use');\n      }\n    }),\n  requirePassword: check('password')\n    .trim()\n    .isLength({ min: 4, max: 20 })\n    .withMessage('Must be between 4 and 20 characters'),\n  requirePasswordConfirmation: check('passwordConfirmation')\n    .trim()\n    .isLength({ min: 4, max: 20 })\n    .withMessage('Must be between 4 and 20 characters')\n    .custom((passwordConfirmation, { req }) => {\n      if (passwordConfirmation !== req.body.password) {\n        throw new Error('Passwords must match');\n      }\n      return true;\n    }),\n  requireEmailExists: check('email')\n    .trim()\n    .normalizeEmail()\n    .isEmail()\n    .withMessage('Must provide a valid email')\n    .custom(async email => {\n      const user = await usersRepo.getOneBy({ email });\n      if (!user) {\n        throw new Error('Email not found!');\n      }\n    }),\n  requireValidPasswordForUser: check('password')\n    .trim()\n    .custom(async (password, { req }) => {\n      const user = await usersRepo.getOneBy({ email: req.body.email });\n      if (!user) {\n        throw new Error('Invalid password');\n      }\n\n      const validPassword = await usersRepo.comparedPasswords(\n        user.password,\n        password\n      );\n      if (!validPassword) {\n        throw new Error('Invalid password');\n      }\n    })\n};"]}