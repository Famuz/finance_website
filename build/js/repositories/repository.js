const fs=require("fs"),crypto=require("crypto");module.exports=class{constructor(t){if(!t)throw new Error("Creating a repository requires a filename");this.filename=t;try{fs.accessSync(this.filename)}catch(t){fs.writeFileSync(this.filename,"[]")}}async create(t){t.id=this.randomId();const e=await this.getAll();return e.push(t),await this.writeAll(e),t}async getAll(){return JSON.parse(await fs.promises.readFile(this.filename,{encoding:"utf8"}))}async writeAll(t){await fs.promises.writeFile(this.filename,JSON.stringify(t,null,2))}randomId(){return crypto.randomBytes(4).toString("hex")}async getOne(t){return(await this.getAll()).find(e=>e.id===t)}async delete(t){const e=(await this.getAll()).filter(e=>e.id!==t);await this.writeAll(e)}async update(t,e){const i=await this.getAll(),r=i.find(e=>e.id===t);if(!r)throw new Error(`Records with id ${t} not found`);Object.assign(r,e),await this.writeAll(i)}async getOneBy(t){const e=await this.getAll();for(let i of e){let e=!0;for(let r in t)i[r]!==t[r]&&(e=!1);if(e)return i}}};
//# sourceMappingURL=repository.js.map
